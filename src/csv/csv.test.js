const path = require('path')
const { readFileSync } = require('fs')
const { generateCsvStringFromOrder } = require('./csv')
const { COMPLETE_ORDER_ENGLISH_UNTYPED, COMPLETE_ORDER_ENGLISH_NEWLINES, COMPLETE_ORDER_NO_PAYMENTS } = require('./__mocks__/constants')

/** @type {import('../orders').Order} */
// @ts-ignore re-assigning to get around excess property checks
const completeOrderEnglish = COMPLETE_ORDER_ENGLISH_UNTYPED

describe('generateCsvStringFromOrder', () => {
  it('returns the correct CSV string when given a complete order whose locale is en-CA', () => {
    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00990","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,992.14,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00990",,,"EXPRESS",1,"N","N","Y","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00990",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","N","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00990",1,"23551711",1,110.5,"HST-ON"
"N","00990",1,"23551711",992.14,"05","41","1122",,"1111","480"
`.split('\n').join('\r\n') // the expected string has Windows line breaks
    expect(generateCsvStringFromOrder(completeOrderEnglish)).toEqual(expectedOrderCsv)
  })

  it('returns the correct CSV string when given a complete order whose destinationSiteId is not a number', () => {
    const completeOrderWithInvalidDestinationSiteId = /** @type {import('../orders').Order} */ ({
      ...completeOrderEnglish
    })

    completeOrderWithInvalidDestinationSiteId.custom.fields.destinationSiteId = false

    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00990","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,992.14,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00990",,,"EXPRESS",1,"N","N","Y","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00990",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","N","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00990",1,"23551711",1,110.5,"HST-ON"
"N","00990",1,"23551711",992.14,"05","41","1122",,"1111","480"
`.split('\n').join('\r\n') // the expected string has Windows line breaks
    expect(generateCsvStringFromOrder(completeOrderWithInvalidDestinationSiteId)).toEqual(expectedOrderCsv)
  })

  it('returns the correct CSV string when given a complete order whose locale is fr-CA', () => {
    const completeOrderFrench = /** @type {import('../orders').Order} */ ({
      ...completeOrderEnglish,
      locale: 'fr-CA'
    })

    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00990","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,992.14,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00990",,,"EXPRESS",3,"N","N","Y","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00990",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","N","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00990",1,"23551711",1,110.5,"HST-ON"
"N","00990",1,"23551711",992.14,"05","41","1122",,"1111","480"
`.split('\n').join('\r\n')
    expect(generateCsvStringFromOrder(completeOrderFrench)).toEqual(expectedOrderCsv)
  })

  it('returns the correct CSV string when given an order whose payment is not released', () => {
    const orderWithFailedPayment = { ...completeOrderEnglish }
    orderWithFailedPayment.paymentInfo.payments[0].obj.transactions[0] = { type: 'Charge', state: 'Pending' }

    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00990","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,992.14,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00990",,,"EXPRESS",1,"N","N","N","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00990",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","N","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00990",1,"23551711",1,110.5,"HST-ON"
"N","00990",1,"23551711",992.14,"05","41","1122",,"1111","480"
`.split('\n').join('\r\n')
    console.log(generateCsvStringFromOrder(orderWithFailedPayment))
    // @ts-ignore
    expect(generateCsvStringFromOrder(orderWithFailedPayment)).toEqual(expectedOrderCsv)
  })

  it('returns a CSV string with the `ENDLESS_AISLE_IND` set to Y for endless aisle items', () => {
    const orderWithEndlessAisleItem = { ...completeOrderEnglish }
    orderWithEndlessAisleItem.lineItems[0].variant.attributes = [...completeOrderEnglish.lineItems[0].variant.attributes, { name: 'isEndlessAisle', value: true }]
    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00990","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,992.14,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00990",,,"EXPRESS",1,"N","N","N","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00990",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","Y","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00990",1,"23551711",1,110.5,"HST-ON"
"N","00990",1,"23551711",992.14,"05","41","1122",,"1111","480"
`.split('\n').join('\r\n')
    expect(generateCsvStringFromOrder(completeOrderEnglish)).toEqual(expectedOrderCsv)
  })

  it('returns the correct CSV string when given a complete order when the cartSourceWebsite is 997', () => {
    const orderWith997CartSourceWebsite = { ...completeOrderEnglish }
    orderWith997CartSourceWebsite.custom.fields.cartSourceWebsite = '00997'
    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00997","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,992.14,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00997",,,"EXPRESS",1,"N","N","N","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00997",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","Y","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00997",1,"23551711",1,110.5,"HST-ON"
"N","00997",1,"23551711",992.14,"05","41","1122",,"1111","480"
`.split('\n').join('\r\n') // the expected string has Windows line breaks
    expect(generateCsvStringFromOrder(orderWith997CartSourceWebsite)).toEqual(expectedOrderCsv)
  })


  it('returns the correct CSV string when given a complete order when the payment method is klarna and the value is above 9400', () => {
    const orderWithKlarnaPaymentAbove9400 = { ...COMPLETE_ORDER_ENGLISH_UNTYPED }

    orderWithKlarnaPaymentAbove9400.custom.fields.destinationSiteId = false
    orderWithKlarnaPaymentAbove9400.paymentInfo.payments[0].obj = {
      paymentMethodInfo: {
        paymentInterface: 'plugin_v2',
        method: 'plugin',
        name: {
          en: 'plugin_v2'
        }
      },
      amountPlanned: {
        type: 'centPrecision',
        currencyCode: 'CAD',
        centAmount: 94000,
        fractionDigits: 2
      },
      custom: {
        // @ts-ignore incomplete custom fields for testing purposes
        fields: {
          transaction_card_last4: 'Klarna',
          transaction_card_expiry: '',
          auth_number: 'authNumber',
          bin: 'N/A',
          transaction_card_type: 'klarna'
        }
      }
    }

    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00997","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,940,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00997",,,"EXPRESS",1,"N","Y","Y","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00997",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","Y","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00997",1,"23551711",1,110.5,"HST-ON"
"N","00997",1,"23551711",940,"93",,,,,
`.split('\n').join('\r\n') // the expected string has Windows line breaks
    // @ts-ignore incomplete custom fields for testing purposes
    expect(generateCsvStringFromOrder(orderWithKlarnaPaymentAbove9400)).toEqual(expectedOrderCsv)
  })


  it('returns the correct CSV string when given a complete order when the payment method is klarna and the value is below 9400', () => {
    const orderWithKlarnaPaymentBelow9400 = { ...COMPLETE_ORDER_ENGLISH_UNTYPED }

    orderWithKlarnaPaymentBelow9400.paymentInfo.payments[0].obj = {
      paymentMethodInfo: {
        paymentInterface: 'plugin_v2',
        method: 'plugin',
        name: {
          en: 'plugin_v2'
        }
      },
      amountPlanned: {
        type: 'centPrecision',
        currencyCode: 'CAD',
        centAmount: 93990,
        fractionDigits: 2
      },
      custom: {
        // @ts-ignore incomplete custom fields for testing purposes
        fields: {
          transaction_card_last4: 'Klarna',
          transaction_card_expiry: '',
          auth_number: 'authNumber',
          bin: 'N/A',
          transaction_card_type: 'klarna'
        }
      }
    }

    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00997","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,939.9,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00997",,,"EXPRESS",1,"N","N","Y","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00997",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","Y","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00997",1,"23551711",1,110.5,"HST-ON"
"N","00997",1,"23551711",939.9,"93",,,,,
`.split('\n').join('\r\n') // the expected string has Windows line breaks
    // @ts-ignore incomplete custom fields for testing purposes
    expect(generateCsvStringFromOrder(orderWithKlarnaPaymentBelow9400)).toEqual(expectedOrderCsv)
  })

  it('returns strings that match example CSVs that were processed correctly by JESTA', () => {
    const exampleOrderNumbers = ['24600493', '24600955', '24839685', '24845933', '25068048', '24596603', '24738417', '24846490', '68064628', '68063034']

    for (const orderNumber of exampleOrderNumbers) {
      const rawOrderJson = readFileSync(path.join('src/example-orders', `${orderNumber}.json`), 'utf8')
      const parsedOrderJson = JSON.parse(rawOrderJson)
      const expectedOrderCsvString = readFileSync(path.join('src/example-orders', `${orderNumber}.csv`), 'utf8')
      const actualOrderCsvString = generateCsvStringFromOrder(parsedOrderJson)

      expect(actualOrderCsvString).toEqual(expectedOrderCsvString)
    }
  })

  it('returns the correct CSV string when given a complete order has newlines', () => {
    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00990","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry ","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,992.14,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00990",,,"EXPRESS",1,"N","N","Y","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00990",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","N","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00990",1,"23551711",1,110.5,"HST-ON"
"N","00990",1,"23551711",992.14,"05","41","1122",,"1111","480"
`.split('\n').join('\r\n') // the expected string has Windows line breaks
    //@ts-ignore incomplete custom fields for testing purposes
    expect(generateCsvStringFromOrder(COMPLETE_ORDER_ENGLISH_NEWLINES)).toEqual(expectedOrderCsv)
  })

  it('returns the correct CSV string when order has no payments', () => {
    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00990","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry ","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,0,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00990",,,"EXPRESS",1,"N","N","Y","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00990",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","N","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00990",1,"23551711",1,110.5,"HST-ON"
`.split('\n').join('\r\n') // the expected string has Windows line breaks
    //@ts-ignore incomplete custom fields for testing purposes
    expect(generateCsvStringFromOrder(COMPLETE_ORDER_NO_PAYMENTS)).toEqual(expectedOrderCsv)
  })

  it('returns the correct CSV string when given a complete order when the payment method is paypal and the value is above or equal 850 CAD', () => {
    const orderWithPaypalPaymentAbove850 = { ...COMPLETE_ORDER_ENGLISH_UNTYPED }

    orderWithPaypalPaymentAbove850.paymentInfo.payments[0].obj = {
      paymentMethodInfo: {
        paymentInterface: 'plugin_v2',
        method: 'plugin',
        name: {
          en: 'plugin_v2'
        }
      },
      amountPlanned: {
        type: 'centPrecision',
        currencyCode: 'CAD',
        centAmount: 85000,
        fractionDigits: 2
      },
      custom: {
        // @ts-ignore incomplete custom fields for testing purposes
        fields: {
          transaction_card_expiry: '',
          auth_number: 'authNumber',
          bin: 'N/A',
          transaction_card_type: 'paypal'
        }
      }
    }

    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00997","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,850,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00997",,,"EXPRESS",1,"N","Y","Y","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00997",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","Y","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00997",1,"23551711",1,110.5,"HST-ON"
"N","00997",1,"23551711",850,"80",,,,,
`.split('\n').join('\r\n') // the expected string has Windows line breaks
    // @ts-ignore incomplete custom fields for testing purposes
    expect(generateCsvStringFromOrder(orderWithPaypalPaymentAbove850)).toEqual(expectedOrderCsv)
  })


  it('returns the correct CSV string when given a complete order when the payment method is paypal and the value is below 850 CAD', () => {
    const orderWithPaypalPaymentBelow850 = { ...COMPLETE_ORDER_ENGLISH_UNTYPED }

    orderWithPaypalPaymentBelow850.paymentInfo.payments[0].obj = {
      paymentMethodInfo: {
        paymentInterface: 'plugin_v2',
        method: 'plugin',
        name: {
          en: 'plugin_v2'
        }
      },
      amountPlanned: {
        type: 'centPrecision',
        currencyCode: 'CAD',
        centAmount: 84999,
        fractionDigits: 2
      },
      custom: {
        // @ts-ignore incomplete custom fields for testing purposes
        fields: {
          transaction_card_expiry: '',
          auth_number: 'authNumber',
          bin: 'N/A',
          transaction_card_type: 'paypal'
        }
      }
    }

    const expectedOrderCsv = `RecordType H,SITE_ID,WFE_TRANS_ID,SHIP_TO_FIRST_NAME,SHIP_TO_LAST_NAME,,SHIP_TO_ADDRESS_1,SHIP_TO_ADDRESS_2,SHIP_TO_ADDRESS_3,SHIP_TO_CITY,SHIP_TO_STATE_ID,SHIP_TO_ZIP_CODE,SHIP_TO_COUNTRY_ID,WFE_CUSTOMER_ID,BILL_TO_FIRST_NAME,BILL_TO_LAST_NAME,BILL_TO_ADDRESS_1,BILL_TO_ADDRESS_2,BILL_TO_ADDRESS_3,BILL_TO_CITY,BILL_TO_STATE_ID,BILL_TO_ZIP_CODE,BILL_TO_COUNTRY_ID,BILL_TO_HOME_PHONE,EMAIL_ADDRESS,CARRIER_ID,RUSH_SHIPPING_IND,SHIP_COMPLETE_IND,,SHIPPING_CHARGES_TOTAL,TAX_TOTAL,,TRANSACTION_TOTAL,,POS_EQUIVALENCE,,,,,ORDER_DATE,ADDITIONAL_METADATA,SHIPPING_TAX1,SHIPPING_TAX1_DESCRIPTION,SHIPPING_TAX2,SHIPPING_TAX2_DESCRIPTION,SHIPPING_TAX3,SHIPPING_TAX3_DESCRIPTION,DESTINATION_SITE_ID,REQUESTER_SITE_ID,,,SERVICE_TYPE,LANGUAGE_NO,FREE_RETURN_IND,SIGNATURE_REQUIRED_IND,RELEASED,GIFT_NOTE,LOYALTY_SESSION_ID
RecordType D,SITE_ID,LINE,WFE_TRANS_ID,,,,QTY_ORDERED,UNIT_PRICE,,EXTENSION_AMOUNT,LINE_SHIPPING_CHARGES,LINE_TOTAL_TAX,LINE_TOTAL_AMOUNT,BAR_CODE_ID,ENDLESS_AISLE_IND,EXT_REF_ID,GIFT_WRAP_IND,,,SALESPERSON_ID,ADDITIONAL_METADATA,SUB_TYPE,ITEM_IDENTIFIER
RecordType T,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,MERCHANDISE_TAX_AMOUNT,MERCHANDISE_TAX_DESC
RecordType N,SITE_ID,LINE,WFE_TRANS_ID,AMOUNT,POS_EQUIVALENCE,REFERENCENO,EXPDATE,,CARD_NO,AUTHORIZATION_NO
RecordType M,SITE_ID,LINE,WFE_TRANS_ID,SEQUENCE,AMOUNT,REASON_ID,MISC_TAX_AMOUNT1,MISC_TAX_DESC1,MISC_TAX_AMOUNT2,MISC_TAX_DESC2
"H","00997","23551711","Harry","Rosen",,"55 Fake St",,,"Toronto","ON","M4V 1H6","CA",,"Harry","Rosen","55 Fake St",,,"Toronto","ON","M4V 1H6","CA","5551231234","user@gmail.com","FDX","Y","N",,28,114.14,,849.99,,,,,,,"2020-08-04 11:39","ed6c636af37a4d738ba8d374fa219cbc",3.64,"HST-ON",,,,,,"00997",,,"EXPRESS",1,"N","N","Y","Happy birthday","4907963f-f36c-4874-83af-4c7b3c106594"
"D","00997",1,"23551711",,,,1,850,,850,0,110.5,850,"89950453-01","Y","496332a3-45d9-4ed8-ae44-5b55693c89ce","Y",,,"sp-0001",,"UPCE","496332a3-45d9-4ed8-ae44-5b55693c89ce"
"T","00997",1,"23551711",1,110.5,"HST-ON"
"N","00997",1,"23551711",849.99,"80",,,,,
`.split('\n').join('\r\n') // the expected string has Windows line breaks
    // @ts-ignore incomplete custom fields for testing purposes
    expect(generateCsvStringFromOrder(orderWithPaypalPaymentBelow850)).toEqual(expectedOrderCsv)
  })

})
